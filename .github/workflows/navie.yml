name: Plan issue with Navie

on:
  issues:
    types: [
      opened,
      edited,
      reopened,
      labeled,
      unlabeled
    ]

permissions:
  contents: read
  issues: write

jobs:
  build-appmap-js:
    if: contains(github.event.issue.labels.*.name, 'navie')
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # Cache the appmap-js build
      - name: Cache appmap-js build
        uses: actions/cache@v4
        id: cache-appmap-js
        with:
          lookup-only: true
          path: |
            submodules/appmap-js/node_modules
            submodules/appmap-js/packages/*/built
            submodules/appmap-js/packages/*/dist
            submodules/appmap-js/packages/*/node_modules
          key: appmap-js-dist-${{ runner.os }}-${{ hashFiles('.git/modules/submodules/appmap-js/HEAD') }}

      - name: Set up Node.js
        if: steps.cache-appmap-js.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3

      - name: Build submodules
        if: steps.cache-appmap-js.outputs.cache-hit != 'true'
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
        run: |
          cd submodules/appmap-js
          git checkout -- .
          yarn
          yarn build
          chmod +x packages/cli/built/cli.js
  
  plan:
    if: contains(github.event.issue.labels.*.name, 'navie')
    runs-on: ubuntu-latest
    needs: build-appmap-js
    env:
      APPMAP_COMMAND: submodules/appmap-js/packages/cli/built/cli.js
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Restore appmap-js build
        uses: actions/cache/restore@v4
        id: cache-appmap-js
        with:
          fail-on-cache-miss: true
          path: |
            submodules/appmap-js/node_modules
            submodules/appmap-js/packages/*/built
            submodules/appmap-js/packages/*/dist
            submodules/appmap-js/packages/*/node_modules
          key: appmap-js-dist-${{ runner.os }}-${{ hashFiles('.git/modules/submodules/appmap-js/HEAD') }}

      - name: Plan with Navie
        run: |
          cat <<'EOF' > issue.txt
          ${{ github.event.issue.title }}
          EOF
          echo "" >> issue.txt
          cat <<'EOF' >> issue.txt
          ${{ github.event.issue.body }}
          EOF

          ./bin/plan

          generated_plan_file=.navie/work/plan/plan.md
          master_plan_file=.navie/plan.md

          echo "<!-- navie-plan -->" > $master_plan_file
          echo "" >> $master_plan_file
          cat $generated_plan_file >> $master_plan_file
          encoded_body=$(jq -Rs . < $master_plan_file)

          # Using gh tools, enumerate the issue comments and look for the comment with the embedded comment:
          # <!-- navie-plan -->

          comment_id=$(gh issue view ${{github.event.issue.number}} --json comments --jq '.comments[] | select(.body | contains("<!-- navie-plan -->")) | .id')
    
          # If the comment is found, edit the comment using cURL
          # If the comment is not found, add a new comment using cURL
          if [ -z "$comment_id" ]; then
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" \
              -d "{\"body\": $encoded_body}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          else
            curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" \
              -d "{\"body\": $encoded_body}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
          fi
